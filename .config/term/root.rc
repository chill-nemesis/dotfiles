# This is the root file for loading all other specific bashrc configs

# Helper functions. Make sure to remove them at the end of the file!
# uncommenting the following flag will enable debug output
# TC_ENABLE_DEBUG_FLAG="true"
DebugMessage () 
{
    if [[ "${TC_ENABLE_DEBUG_FLAG}" == "true" ]]; then
        echo "$@"
    fi
}

Warn ()
{
    # make the output red, and then reset colouring
    echo -e "\033[0;31m$@\033[0m"
}

# Get the directory of this file
TC_ROOT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# Set the modules dir
TC_MODULES_DIR=$TC_ROOT_DIR/../../modules

# Set the cache dir
TC_CACHE_DIR=$TC_ROOT_DIR/../../.cache
if [ ! -d "$TC_CACHE_DIR" ]; then
    Warn "Cache directory does not exist! We probably lost previous installation data!"
    mkdir $TC_CACHE_DIR
fi

# Get the shell that is running this config
TC_SHELL=$( ps -cp $$ -o command="" )

# This space is reserved for order-dependent loading


# load all available terminal-agnostic scripts
for FILE in $TC_ROOT_DIR/*; do
    # Skip directories. Subdirs are supposed to enable grouping if included scripts need additional data.
    if [[ -d $FILE ]]; then
        continue;
    fi
    
    # skip this file. We do not want an infinite recursion
    if [[ $FILE == $TC_ROOT_DIR/root.* ]]; then
        continue
    fi

    if [[ $FILE == *.rc ]]; then
        DebugMessage "Loading global file: " $FILE
        . $FILE
    fi
done

# load the corresponding terminal scripts
for FILE in $TC_ROOT_DIR/*; do
    # Skip directories. Subdirs are supposed to enable grouping if included scripts need additional data.
    if [[ -d $FILE ]]; then
        continue;
    fi
    
    # skip this file. We do not want an infinite recursion
    if [[ "${FILE}" == "${TC_ROOT_DIR}/root.*" ]]; then
        continue
    fi

    # if the file extension matches our shell, we load it!
    if [[ $FILE == *.$TC_SHELL ]]; then
        DebugMessage "Loading ${TC_SHELL} file: " $FILE
        . $FILE
    fi
done


# TODO: load local configs for the current user that might override previously set global options --> Needs to be AFTER the global options have been loaded


# undefine all functions/helper vars
# It is a good practice to use inverse declartion order ;)
unset -f DebugMessage Warn
unset TC_ROOT_DIR TC_MODULES_DIR TC_SHELL TC_ENABLE_DEBUG_FLAG
