current_date_time=$(date +%s)
last_check_time=$(cat $TC_CACHE_DIR/.last_version_check 2>/dev/null)
diff_seconds=$((current_date_time - last_check_time))


# only perform checks and updates if we have at least waited for 1 day (86400s) since the last check
if [ $diff_seconds -lt 86400 ]; then
	unset diff_seconds current_date_time last_check_time
	return
fi

# Check if we can reach the repo
# Get the remote origin URL
remote_url=$(cd $TC_ROOT_DIR && git config --get remote.origin.url)

if [ -z "$remote_url" ]; then
	echo "No remote repository found."
	unset diff_seconds current_date_time last_check_time remote_url
	return 1
fi

# Extract the domain from the remote URL (supports both HTTPS and SSH URLs)
if [[ "$remote_url" =~ ^http ]]; then
	domain=$(echo "$remote_url" | awk -F/ '{print $3}')
else
	domain=$(echo "$remote_url" | awk -F@ '{print $2}' | awk -F: '{print $1}')
fi

# Ping the domain to check internet connectivity
if ping -c 1 "$domain" &> /dev/null
then
	DebugMessage "Internet connection is available to $domain."
else
	DebugMessage "No internet connection to $domain - aborting update check."
	unset diff_seconds current_date_time last_check_time remote_url domain
	return
fi

# fetch remote quietly
# We wrap this in a command expression to not actually modifiy the current working dir!
$(cd $TC_ROOT_DIR && git fetch --quiet)

# We now have fetched the newest version - now we can mark our version check
echo $current_date_time > $TC_CACHE_DIR/.last_version_check
unset diff_seconds last_check_time current_date_time

# check version of main branch (even if we are on another branch)
local_main_hash=$(cd $TC_ROOT_DIR && git rev-parse main)
remote_main_hash=$(cd $TC_ROOT_DIR && git rev-parse origin/main)

if [ "${local_main_hash}" == "${remote_main_hash}" ]; then
	DebugMessage ".dotFiles is running on the latest version"
	unset local_main_hash remote_main_hash
	return
fi
unset local_main_hash remote_main_hash


# check if we are running on main branch
branch_name=$(cd $TC_ROOT_DIR && git symbolic-ref --quiet --short HEAD)

# first, check if we are on the main branch
if [ "${branch_name}" != "main" ]; then
	Warn "There is an update available, but .dotfile is not running on \"main\"!"
	unset branch_name
	return
fi
unset branch_name

# We are not on the latest version
# Ask if we should update
while true; do
	echo "There is a new version available."
	read -p "Do you want to update to the latest version? [Y/n] " yn

	case $yn in
		[Yy]* ) break;; # everything after this loop will deal with updating
		[Nn]* ) unset yn && return;; # dont execute any further
		"" ) break;; # use default answer, that is yes!
		* ) ;; # we could not parse the input, try again
	esac
done
unset yn

$(cd $TC_ROOT_DIR && git checkout --quiet main)
$(cd $TC_ROOT_DIR && git pull --quiet --ff-only)


# Restart the shell environment
# Since we only do this at the start of the terminal, this should not be too drastic
exec "$SHELL"