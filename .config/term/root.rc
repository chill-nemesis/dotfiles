# This is the root file for loading all other specific bashrc configs

# Get the directory of this file
TC_ROOT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

# Helper functions. Make sure to remove them at the end of the file!
# uncommenting the following flag will enable debug output
# TC_ENABLE_DEBUG_FLAG="true"
. $TC_ROOT_DIR/helpers.rc.internal

# Set the modules dir
TC_MODULES_DIR=$TC_ROOT_DIR/../../modules

# Set the cache dir
TC_CACHE_DIR=$TC_ROOT_DIR/../../.cache
if [ ! -d "$TC_CACHE_DIR" ]; then
    Warn "Cache directory does not exist! We probably lost previous installation data!"
    mkdir $TC_CACHE_DIR
fi

# Get the shell that is running this config
TC_SHELL=$(detect_shell_type)

# next, check for updates
# If this finds an update, the whole session will be restarted!
. $TC_ROOT_DIR/update.rc.internal

# This space is reserved for order-dependent loading

# define a helper function that checks if an update should be performed
# It takes an identifier as an argument plus a delta time in seconds
# And returns true if the update should be performed
function should_perform_update() {
    local identifier=$1
    local delta_time=$2

    # Check if the cache file wiht the last check time exists
    local cache_file="$TC_CACHE_DIR/${identifier}_last_check_time"

    if [[ ! -f $cache_file ]]; then
        # If the file does not exist, we create it with the current time
        echo $(date +%s) >$cache_file
        return 0 # Perform update
    fi

    # Read the last check time from the cache file
    local last_check_time=$(cat $cache_file)
    local current_time=$(date +%s)
    local time_difference=$((current_time - last_check_time))

    if ((time_difference >= delta_time)); then
        # If the time difference is greater than or equal to the delta time, we perform the update
        echo $current_time >$cache_file # Update the last check time
        return 0                        # Perform update
    else
        return 1 # Do not perform update
    fi
}

# load all available terminal-agnostic scripts
for FILE in $TC_ROOT_DIR/*; do
    # Skip directories. Subdirs are supposed to enable grouping if included scripts need additional data.
    if [[ -d $FILE ]]; then
        continue
    fi

    # skip this file. We do not want an infinite recursion
    if [[ $FILE == $TC_ROOT_DIR/root.* ]]; then
        continue
    fi

    if [[ $FILE == *.rc ]]; then
        DebugMessage "Loading global file: " $FILE
        . $FILE
    fi
done

# load the corresponding terminal scripts
for FILE in $TC_ROOT_DIR/*; do
    # Skip directories. Subdirs are supposed to enable grouping if included scripts need additional data.
    if [[ -d $FILE ]]; then
        continue
    fi

    # skip this file. We do not want an infinite recursion
    if [[ "${FILE}" == "${TC_ROOT_DIR}/root.*" ]]; then
        continue
    fi

    # if the file extension matches our shell, we load it!
    if [[ $FILE == *.$TC_SHELL ]]; then
        DebugMessage "Loading ${TC_SHELL} file: " $FILE
        . $FILE
    fi
done

# TODO: load local configs for the current user that might override previously set global options --> Needs to be AFTER the global options have been loaded

# undefine all functions/helper vars
# It is a good practice to use inverse declartion order ;)
unset -f DebugMessage Warn
unset -f is_windows convert_path_to_windows source_files
unset -f should_perform_update
unset TC_ROOT_DIR TC_MODULES_DIR TC_SHELL TC_ENABLE_DEBUG_FLAG
